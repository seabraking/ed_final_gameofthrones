/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package InterfaceGrafica;

import Classes.Cidade;
import Classes.DadosTrajeto;
import Classes.Dijkstra;
import Classes.Jogador;
import Classes.NetworkCidades;
import ED_12_Parte1_Ex2.ArrayIterator;
import ED_12_Parte1_Ex2.ArrayUnorderedList;
import ED_12_Parte1_Ex2.LinkedQueue;
import ED_12_Parte1_Ex2.Network;
import ED_12_Parte1_Ex2.NetworkADT;
import ED_12_Parte1_Ex2.UnorderedListADT;
import Exeptions.FicheiroNaoEnc;
import Ficheiros.DataManagement;
import Ficheiros.EscreverErrosFicheiro;
import Interfaces.DataManagementADT;
import java.awt.Dimension;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vitor
 */
public class Demo extends javax.swing.JFrame {

    NetworkADT networkADT;
    Mapa panel = new Mapa(new ImageIcon("map.png").getImage());
    NetworkCidades network;
    Jogador jogador = null;

    Cidade segundaCidade = null;
    Cidade terceiraCidade = null;
    LinkedQueue<Cidade> resultado = null;
    double exercitoPerdas = 0;
    UnorderedListADT<String> cidadesConquistadas = new ArrayUnorderedList<>();

    /**
     * Creates new form NewJFrame
     */
    ;

    /**
     * Creates new form NewJFrame
     */
    public Demo() {

        this.setPreferredSize(new Dimension(675, 750));
        this.setTitle("Game of <T>hrones - AI ");
        try {
            UIManager.setLookAndFeel(UIManager
                    .getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e) {
            e.printStackTrace();
        }
        initComponents();

        panelMain.add(panel);
        pack();

    }

    /*

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        inicio = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        fim = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        panelMain = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        durMax = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        custoMax = new javax.swing.JTextField();
        custoMaxCombate = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        numCombatesMax = new javax.swing.JTextField();
        checkDur = new javax.swing.JCheckBox();
        checkCusto = new javax.swing.JCheckBox();
        checkNumeroMaxCombates = new javax.swing.JCheckBox();
        checkCustoMaximoCombate = new javax.swing.JCheckBox();
        status = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        a1 = new javax.swing.JRadioButton();
        a2 = new javax.swing.JRadioButton();
        a3 = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        nomeJ = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        cidadeJ = new javax.swing.JComboBox<>();
        exercitoJ = new javax.swing.JFormattedTextField();
        jButton6 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N

        inicio.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        inicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inicioActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Cidades Conquistadas");

        fim.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Cidade Destino");

        jButton2.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jButton2.setText("Calcular Melhores Trajetos..");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        panelMain.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout panelMainLayout = new javax.swing.GroupLayout(panelMain);
        panelMain.setLayout(panelMainLayout);
        panelMainLayout.setHorizontalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelMainLayout.setVerticalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 312, Short.MAX_VALUE)
        );

        jTable1.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Final"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel2.setBackground(java.awt.SystemColor.activeCaption);
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        durMax.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        durMax.setText("31");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Duraçao Máxima");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Custo Maximo");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Custo Máximo (p/combate)");

        custoMax.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N

        custoMaxCombate.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        custoMaxCombate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                custoMaxCombateActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Numero Maximo de Combates");

        checkDur.setBackground(java.awt.SystemColor.activeCaption);
        checkDur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkDurActionPerformed(evt);
            }
        });

        checkCusto.setBackground(java.awt.SystemColor.activeCaption);
        checkCusto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkCustoActionPerformed(evt);
            }
        });

        checkNumeroMaxCombates.setBackground(java.awt.SystemColor.activeCaption);
        checkNumeroMaxCombates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkNumeroMaxCombatesActionPerformed(evt);
            }
        });

        checkCustoMaximoCombate.setBackground(java.awt.SystemColor.activeCaption);
        checkCustoMaximoCombate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkCustoMaximoCombateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(durMax, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addComponent(custoMax))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkDur, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkCusto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(custoMaxCombate, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkCustoMaximoCombate, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numCombatesMax, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkNumeroMaxCombates, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(22, 22, 22))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(checkDur, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(checkCusto, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkCustoMaximoCombate, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5)
                                .addComponent(jLabel7)
                                .addComponent(durMax, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(custoMaxCombate, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkNumeroMaxCombates, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel6)
                                .addComponent(custoMax, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel8)
                                .addComponent(numCombatesMax, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(34, 34, 34))
        );

        status.setFont(new java.awt.Font("Leelawadee UI", 2, 14)); // NOI18N
        status.setText("Inicializado..");

        jLabel4.setFont(new java.awt.Font("Leelawadee UI", 3, 14)); // NOI18N
        jLabel4.setText("Status: ");

        a1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        a1.setText("Alternativa 2");
        a1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                a1ActionPerformed(evt);
            }
        });

        a2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        a2.setText("Alternativa 3");
        a2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                a2ActionPerformed(evt);
            }
        });

        a3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        a3.setText("Alternativa 1");
        a3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                a3ActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel10.setText("Nome do Jogador");

        nomeJ.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        nomeJ.setText("ESTGF PLAYER");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel12.setText("Exercito");

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel13.setText("Cidade");

        cidadeJ.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        exercitoJ.setText("100000");
        exercitoJ.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        jButton6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton6.setText("Criar Jogador");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(nomeJ, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(exercitoJ, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(cidadeJ, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomeJ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exercitoJ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cidadeJ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6))
                .addContainerGap())
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addComponent(jLabel12))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jButton9.setBackground(java.awt.SystemColor.activeCaption);
        jButton9.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jButton9.setText("Atacar!!");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(status)
                        .addGap(3, 3, 3))
                    .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(a3)
                                        .addGap(18, 18, 18)
                                        .addComponent(a1)
                                        .addGap(18, 18, 18)
                                        .addComponent(a2))
                                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(9, 9, 9))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(inicio, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(fim, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(a3)
                            .addComponent(a1)
                            .addComponent(a2)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(6, 6, 6)
                .addComponent(panelMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(status))
                .addGap(29, 29, 29))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 677, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("Cidade");
        modelo.addColumn("Defesa");
        DataManagementADT dataManagementADT = new DataManagement();
        NetworkADT networkADT = new Network();

        try {
            networkADT = dataManagementADT.obterNetwork("./Ficheiros/dadosT.csv");

            ArrayIterator iterator = networkADT.iteratorBFS(0);
            while (iterator.hasNext()) {
                Cidade cidade = (Cidade) iterator.next();
                modelo.addRow(new String[]{cidade.getNome(), String.valueOf(cidade.getDefesa())});

                cidadeJ.addItem(cidade.getNome());
                fim.addItem(cidade.getNome());

            }
            jTable1.setModel(modelo);

        } catch (IOException ex) {
            try {
                EscreverErrosFicheiro eef = new EscreverErrosFicheiro();
                eef.escreverEmficheiro(ex, "DataManager");
                new FicheiroNaoEnc(ex + "");
            } catch (IOException ex1) {
            }
        }

        //

    }//GEN-LAST:event_formWindowOpened

    private void atualizarGrafo() throws ED_11_Parte1_Ex3.EmptyCollectionException {

        DataManagementADT dataManagementADT = new DataManagement();
        network = new NetworkCidades();

        try {
            network = dataManagementADT.obterNetwork("./Ficheiros/dadosT.csv");
        } catch (IOException ex) {
        }
        setAdjacencias((Cidade) network.getVertices()[0]);
        setAdjacencias((Cidade) network.getVertices()[1]);
        setAdjacencias((Cidade) network.getVertices()[2]);
        setAdjacencias((Cidade) network.getVertices()[3]);
        setAdjacencias((Cidade) network.getVertices()[4]);
        setAdjacencias((Cidade) network.getVertices()[5]);
        setAdjacencias((Cidade) network.getVertices()[6]);
        setAdjacencias((Cidade) network.getVertices()[7]);
        setAdjacencias((Cidade) network.getVertices()[8]);
        Dijkstra mp = new Dijkstra();

        Cidade inicioA, fimA;
        String strInicio = inicio.getSelectedItem().toString();
        if (strInicio.contains("Vaes Dothrak")) {
            inicioA = (Cidade) network.getVertices()[0];
        } else if (strInicio.contains("Lhazareen")) {
            inicioA = (Cidade) network.getVertices()[1];
        } else if (strInicio.contains("Qohor")) {
            inicioA = (Cidade) network.getVertices()[2];
        } else if (strInicio.contains("Pentos")) {
            inicioA = (Cidade) network.getVertices()[3];
        } else if (strInicio.contains("King")) {
            inicioA = (Cidade) network.getVertices()[4];
        } else if (strInicio.contains("Crossroads")) {
            inicioA = (Cidade) network.getVertices()[5];
        } else if (strInicio.contains("Winterfell")) {
            inicioA = (Cidade) network.getVertices()[7];
        } else if (strInicio.contains("Castle")) {
            inicioA = (Cidade) network.getVertices()[8];
        } else if (strInicio.contains("The")) {
            inicioA = (Cidade) network.getVertices()[6];
        } else {
            inicioA = (Cidade) network.getVertices()[6];
        }

        String strFim = fim.getSelectedItem().toString();
        if (strFim.contains("Vaes Dothrak")) {
            fimA = (Cidade) network.getVertices()[0];
        } else if (strFim.contains("Lhazareen")) {
            fimA = (Cidade) network.getVertices()[1];
        } else if (strFim.contains("Qohor")) {
            fimA = (Cidade) network.getVertices()[2];
        } else if (strFim.contains("Pentos")) {
            fimA = (Cidade) network.getVertices()[3];
        } else if (strFim.contains("King")) {
            fimA = (Cidade) network.getVertices()[4];
        } else if (strFim.contains("Cross")) {
            fimA = (Cidade) network.getVertices()[5];
        } else if (strFim.contains("Winterfell")) {
            fimA = (Cidade) network.getVertices()[7];
        } else if (strFim.contains("Castle Black")) {
            fimA = (Cidade) network.getVertices()[8];
        } else if (strFim.contains("The")) {
            fimA = (Cidade) network.getVertices()[6];
        } else {
            fimA = (Cidade) network.getVertices()[6];
        }
        DadosTrajeto c = null;
        try {

            LinkedQueue<Cidade> lq;
            if (checkDur.isSelected()) {
                lq = mp.apresenta_caminho_curto(inicioA, fimA, Double.parseDouble(durMax.getText()), Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);

            } else if (checkCusto.isSelected()) {
                lq = mp.apresenta_caminho_curto(inicioA, fimA, Double.POSITIVE_INFINITY,Double.parseDouble(custoMax.getText()), Double.POSITIVE_INFINITY);

            } else if (checkNumeroMaxCombates.isSelected()) {
                lq = mp.apresenta_caminho_curto(inicioA, fimA,Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY,Double.parseDouble(numCombatesMax.getText()));

            } else {
                lq = mp.apresenta_caminho_curto(inicioA, fimA, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
            }
            segundaCidade = lq.first().getNext().getElement();

            LinkedQueue<Cidade> asad = Dijkstra.getCaminho_calculado(fimA);
            String perdasEach = "";
            int maior = -1;
            while (!asad.isEmpty()) {
                Cidade cada = asad.dequeue();
                perdasEach = "=> " + Math.round(cada.getPerdasPorCombate()) + perdasEach;
                if (cada.getPerdasPorCombate() > maior) {
                    maior = (int) Math.round(cada.getPerdasPorCombate());
                }
            }

            if (checkCustoMaximoCombate.isSelected() && maior > Double.parseDouble(custoMaxCombate.getText())) {
                panel.sendShorthestPath(new LinkedQueue(), fimA.getMinDistance(), fimA.getTotaljornada(), perdasEach);
                panel.repaint();
                resultado = lq;
                exercitoPerdas = Math.round(fimA.getMinDistance());
            } else if (checkCustoMaximoCombate.isSelected()) {
                panel.sendShorthestPath(lq, fimA.getMinDistance(), fimA.getTotaljornada(), perdasEach);
                panel.repaint();
                resultado = lq;
                exercitoPerdas = Math.round(fimA.getMinDistance());
            } else {
                panel.sendShorthestPath(lq, fimA.getMinDistance(), fimA.getTotaljornada(), perdasEach);
                panel.repaint();
                resultado = lq;
                exercitoPerdas = Math.round(fimA.getMinDistance());
            }

        } catch (Exception eee) {
            status.setText("Caminho nao encontrado..");
        }
    }

    private void atualizarGrafo2() throws ED_11_Parte1_Ex3.EmptyCollectionException {

        DataManagementADT dataManagementADT = new DataManagement();
        network = new NetworkCidades();

        try {
            network = dataManagementADT.obterNetwork("./Ficheiros/dadosT.csv");
        } catch (IOException ex) {
        }
        setAdjacencias((Cidade) network.getVertices()[0]);
        setAdjacencias((Cidade) network.getVertices()[1]);
        setAdjacencias((Cidade) network.getVertices()[2]);
        setAdjacencias((Cidade) network.getVertices()[3]);
        setAdjacencias((Cidade) network.getVertices()[4]);
        setAdjacencias((Cidade) network.getVertices()[5]);
        setAdjacencias((Cidade) network.getVertices()[6]);
        setAdjacencias((Cidade) network.getVertices()[7]);
        setAdjacencias((Cidade) network.getVertices()[8]);
        Dijkstra mp = new Dijkstra();

        Cidade inicioA, fimA;
        String strInicio = inicio.getSelectedItem().toString();
        if (strInicio.contains("Vaes Dothrak")) {
            inicioA = (Cidade) network.getVertices()[0];
        } else if (strInicio.contains("Lhazareen")) {
            inicioA = (Cidade) network.getVertices()[1];
        } else if (strInicio.contains("Qohor")) {
            inicioA = (Cidade) network.getVertices()[2];
        } else if (strInicio.contains("Pentos")) {
            inicioA = (Cidade) network.getVertices()[3];
        } else if (strInicio.contains("King")) {
            inicioA = (Cidade) network.getVertices()[4];
        } else if (strInicio.contains("Crossroads")) {
            inicioA = (Cidade) network.getVertices()[5];
        } else if (strInicio.contains("Winterfell")) {
            inicioA = (Cidade) network.getVertices()[7];
        } else if (strInicio.contains("Castle")) {
            inicioA = (Cidade) network.getVertices()[8];
        } else if (strInicio.contains("The")) {
            inicioA = (Cidade) network.getVertices()[6];
        } else {
            inicioA = (Cidade) network.getVertices()[6];
        }

        String strFim = fim.getSelectedItem().toString();
        if (strFim.contains("Vaes Dothrak")) {
            fimA = (Cidade) network.getVertices()[0];
        } else if (strFim.contains("Lhazareen")) {
            fimA = (Cidade) network.getVertices()[1];
        } else if (strFim.contains("Qohor")) {
            fimA = (Cidade) network.getVertices()[2];
        } else if (strFim.contains("Pentos")) {
            fimA = (Cidade) network.getVertices()[3];
        } else if (strFim.contains("King")) {
            fimA = (Cidade) network.getVertices()[4];
        } else if (strFim.contains("Cross")) {
            fimA = (Cidade) network.getVertices()[5];
        } else if (strFim.contains("Winterfell")) {
            fimA = (Cidade) network.getVertices()[7];
        } else if (strFim.contains("Castle Black")) {
            fimA = (Cidade) network.getVertices()[8];
        } else if (strFim.contains("The")) {
            fimA = (Cidade) network.getVertices()[6];
        } else {
            fimA = (Cidade) network.getVertices()[6];
        }
        DadosTrajeto c = null;
        try {
            if (segundaCidade != null) {
                inicioA.eliminarAdj(inicioA.getAdjIndex(segundaCidade));

                //inicioA.eliminarAdj(1);
            }

            LinkedQueue<Cidade> lq;
            if (checkDur.isSelected()) {
                lq = mp.apresenta_caminho_curto(inicioA, fimA, Double.parseDouble(durMax.getText()), Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);

            } else if (checkCusto.isSelected()) {
                lq = mp.apresenta_caminho_curto(inicioA, fimA, Double.POSITIVE_INFINITY,Double.parseDouble(custoMax.getText()), Double.POSITIVE_INFINITY);

            } else if (checkNumeroMaxCombates.isSelected()) {
                lq = mp.apresenta_caminho_curto(inicioA, fimA,Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY,Double.parseDouble(numCombatesMax.getText()));

            } else {
                lq = mp.apresenta_caminho_curto(inicioA, fimA, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
            }

            terceiraCidade = (Cidade) lq.first().getNext().getElement();

            LinkedQueue<Cidade> asad = Dijkstra.getCaminho_calculado(fimA);
            String perdasEach = "";
            int maior = -1;
            while (!asad.isEmpty()) {
                Cidade cada = asad.dequeue();
                perdasEach = "=> " + Math.round(cada.getPerdasPorCombate()) + perdasEach;
                if (cada.getPerdasPorCombate() > maior) {
                    maior = (int) Math.round(cada.getPerdasPorCombate());
                }
            }

            if (checkCustoMaximoCombate.isSelected() && maior > Double.parseDouble(custoMaxCombate.getText())) {
                panel.sendShorthestPath(new LinkedQueue(), fimA.getMinDistance(), fimA.getTotaljornada(), perdasEach);
                panel.repaint();
                resultado = lq;
                exercitoPerdas = Math.round(fimA.getMinDistance());
            } else if (checkCustoMaximoCombate.isSelected()) {
                panel.sendShorthestPath(lq, fimA.getMinDistance(), fimA.getTotaljornada(), perdasEach);
                panel.repaint();
                resultado = lq;
                exercitoPerdas = Math.round(fimA.getMinDistance());
            } else {
                panel.sendShorthestPath(lq, fimA.getMinDistance(), fimA.getTotaljornada(), perdasEach);
                panel.repaint();
                resultado = lq;
                exercitoPerdas = Math.round(fimA.getMinDistance());
            }

        } catch (Exception eee) {
            status.setText("Caminho nao encontrado.." + eee);

        }
    }

    private void atualizarGrafo3() throws ED_11_Parte1_Ex3.EmptyCollectionException {

        DataManagementADT dataManagementADT = new DataManagement();
        network = new NetworkCidades();

        try {
            network = dataManagementADT.obterNetwork("./Ficheiros/dadosT.csv");
        } catch (IOException ex) {
        }
        setAdjacencias((Cidade) network.getVertices()[0]);
        setAdjacencias((Cidade) network.getVertices()[1]);
        setAdjacencias((Cidade) network.getVertices()[2]);
        setAdjacencias((Cidade) network.getVertices()[3]);
        setAdjacencias((Cidade) network.getVertices()[4]);
        setAdjacencias((Cidade) network.getVertices()[5]);
        setAdjacencias((Cidade) network.getVertices()[6]);
        setAdjacencias((Cidade) network.getVertices()[7]);
        setAdjacencias((Cidade) network.getVertices()[8]);
        Dijkstra mp = new Dijkstra();

        Cidade inicioA, fimA;
        String strInicio = inicio.getSelectedItem().toString();
        if (strInicio.contains("Vaes Dothrak")) {
            inicioA = (Cidade) network.getVertices()[0];
        } else if (strInicio.contains("Lhazareen")) {
            inicioA = (Cidade) network.getVertices()[1];
        } else if (strInicio.contains("Qohor")) {
            inicioA = (Cidade) network.getVertices()[2];
        } else if (strInicio.contains("Pentos")) {
            inicioA = (Cidade) network.getVertices()[3];
        } else if (strInicio.contains("King")) {
            inicioA = (Cidade) network.getVertices()[4];
        } else if (strInicio.contains("Crossroads")) {
            inicioA = (Cidade) network.getVertices()[5];
        } else if (strInicio.contains("Winterfell")) {
            inicioA = (Cidade) network.getVertices()[7];
        } else if (strInicio.contains("Castle")) {
            inicioA = (Cidade) network.getVertices()[8];
        } else if (strInicio.contains("The")) {
            inicioA = (Cidade) network.getVertices()[6];
        } else {
            inicioA = (Cidade) network.getVertices()[6];
        }

        String strFim = fim.getSelectedItem().toString();
        if (strFim.contains("Vaes Dothrak")) {
            fimA = (Cidade) network.getVertices()[0];
        } else if (strFim.contains("Lhazareen")) {
            fimA = (Cidade) network.getVertices()[1];
        } else if (strFim.contains("Qohor")) {
            fimA = (Cidade) network.getVertices()[2];
        } else if (strFim.contains("Pentos")) {
            fimA = (Cidade) network.getVertices()[3];
        } else if (strFim.contains("King")) {
            fimA = (Cidade) network.getVertices()[4];
        } else if (strFim.contains("Cross")) {
            fimA = (Cidade) network.getVertices()[5];
        } else if (strFim.contains("Winterfell")) {
            fimA = (Cidade) network.getVertices()[7];
        } else if (strFim.contains("Castle Black")) {
            fimA = (Cidade) network.getVertices()[8];
        } else if (strFim.contains("The")) {
            fimA = (Cidade) network.getVertices()[6];
        } else {
            fimA = (Cidade) network.getVertices()[6];
        }
        DadosTrajeto c = null;
        try {
            if (segundaCidade != null) {
                inicioA.eliminarAdj(inicioA.getAdjIndex(segundaCidade));
                if (terceiraCidade != null) {
                    inicioA.eliminarAdj((inicioA.getAdjIndex(terceiraCidade)));
                }
            }
            LinkedQueue<Cidade> lq;
            if (checkDur.isSelected()) {
                lq = mp.apresenta_caminho_curto(inicioA, fimA, Double.parseDouble(durMax.getText()), Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);

            } else if (checkCusto.isSelected()) {
                lq = mp.apresenta_caminho_curto(inicioA, fimA, Double.POSITIVE_INFINITY,Double.parseDouble(custoMax.getText()), Double.POSITIVE_INFINITY);

            } else if (checkNumeroMaxCombates.isSelected()) {
                lq = mp.apresenta_caminho_curto(inicioA, fimA,Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY,Double.parseDouble(numCombatesMax.getText()));

            } else {
                lq = mp.apresenta_caminho_curto(inicioA, fimA, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
            }
            
            LinkedQueue<Cidade> asad = Dijkstra.getCaminho_calculado(fimA);
            String perdasEach = "";
            int maior = -1;
            while (!asad.isEmpty()) {
                Cidade cada = asad.dequeue();
                perdasEach = "=> " + Math.round(cada.getPerdasPorCombate()) + perdasEach;
                if (cada.getPerdasPorCombate() > maior) {
                    maior = (int) Math.round(cada.getPerdasPorCombate());
                }
            }

            if (checkCustoMaximoCombate.isSelected() && maior > Double.parseDouble(custoMaxCombate.getText())) {
                panel.sendShorthestPath(new LinkedQueue(), fimA.getMinDistance(), fimA.getTotaljornada(), perdasEach);
                panel.repaint();
                resultado = lq;
                exercitoPerdas = Math.round(fimA.getMinDistance());
            } else if (checkCustoMaximoCombate.isSelected()) {
                panel.sendShorthestPath(lq, fimA.getMinDistance(), fimA.getTotaljornada(), perdasEach);
                panel.repaint();
                resultado = lq;
                exercitoPerdas = Math.round(fimA.getMinDistance());
            } else {
                panel.sendShorthestPath(lq, fimA.getMinDistance(), fimA.getTotaljornada(), perdasEach);
                panel.repaint();
                resultado = lq;
                exercitoPerdas = Math.round(fimA.getMinDistance());
            }
        } catch (Exception eee) {
            status.setText("Caminho nao encontrado..");
        }
    }

    private void resetGrafo() throws ED_11_Parte1_Ex3.EmptyCollectionException {

        DataManagementADT dataManagementADT = new DataManagement();
        network = new NetworkCidades();

        try {
            network = dataManagementADT.obterNetwork("./Ficheiros/dadosT.csv");
        } catch (IOException ex) {
        }
        setAdjacencias((Cidade) network.getVertices()[0]);
        setAdjacencias((Cidade) network.getVertices()[1]);
        setAdjacencias((Cidade) network.getVertices()[2]);
        setAdjacencias((Cidade) network.getVertices()[3]);
        setAdjacencias((Cidade) network.getVertices()[4]);
        setAdjacencias((Cidade) network.getVertices()[5]);
        setAdjacencias((Cidade) network.getVertices()[6]);
        setAdjacencias((Cidade) network.getVertices()[7]);
        setAdjacencias((Cidade) network.getVertices()[8]);
        Dijkstra mp = new Dijkstra();

        Cidade inicioA, fimA;
        String strInicio = inicio.getSelectedItem().toString();
        if (strInicio.contains("Vaes Dothrak")) {
            inicioA = (Cidade) network.getVertices()[0];
        } else if (strInicio.contains("Lhazareen")) {
            inicioA = (Cidade) network.getVertices()[1];
        } else if (strInicio.contains("Qohor")) {
            inicioA = (Cidade) network.getVertices()[2];
        } else if (strInicio.contains("Pentos")) {
            inicioA = (Cidade) network.getVertices()[3];
        } else if (strInicio.contains("King")) {
            inicioA = (Cidade) network.getVertices()[4];
        } else if (strInicio.contains("Crossroads")) {
            inicioA = (Cidade) network.getVertices()[5];
        } else if (strInicio.contains("Winterfell")) {
            inicioA = (Cidade) network.getVertices()[7];
        } else if (strInicio.contains("Castle")) {
            inicioA = (Cidade) network.getVertices()[8];
        } else if (strInicio.contains("The")) {
            inicioA = (Cidade) network.getVertices()[6];
        } else {
            inicioA = (Cidade) network.getVertices()[6];
        }

        String strFim = fim.getSelectedItem().toString();
        if (strFim.contains("Vaes Dothrak")) {
            fimA = (Cidade) network.getVertices()[0];
        } else if (strFim.contains("Lhazareen")) {
            fimA = (Cidade) network.getVertices()[1];
        } else if (strFim.contains("Qohor")) {
            fimA = (Cidade) network.getVertices()[2];
        } else if (strFim.contains("Pentos")) {
            fimA = (Cidade) network.getVertices()[3];
        } else if (strFim.contains("King")) {
            fimA = (Cidade) network.getVertices()[4];
        } else if (strFim.contains("Cross")) {
            fimA = (Cidade) network.getVertices()[5];
        } else if (strFim.contains("Winterfell")) {
            fimA = (Cidade) network.getVertices()[7];
        } else if (strFim.contains("Castle Black")) {
            fimA = (Cidade) network.getVertices()[8];
        } else if (strFim.contains("The")) {
            fimA = (Cidade) network.getVertices()[6];
        } else {
            fimA = (Cidade) network.getVertices()[6];
        }
        DadosTrajeto c = null;
        try {

            LinkedQueue<String> cq = mp.apresenta_segundo_caminho_curto((Cidade) network.getVertices()[0], (Cidade) network.getVertices()[0]);
            // System.out.println(c.getKms());
            panel.sendShorthestPath(cq, fimA.getMinDistance(), 30., "s");
            panel.repaint();

        } catch (Exception eee) {
            status.setText("Caminho nao encontrado..");
        }
    }

    private void a3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_a3ActionPerformed
        // TODO add your handling code here:
        // resetGrafo();
        if (a1.isSelected()) {
            a1.setSelected(false);

        }
        if (a2.isSelected()) {
            a2.setSelected(false);

        }
        try {
            atualizarGrafo();
        } catch (ED_11_Parte1_Ex3.EmptyCollectionException ex) {
            Logger.getLogger(Demo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_a3ActionPerformed

    private void a2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_a2ActionPerformed
        // TODO add your handling code here:
        // resetGrafo();
        if (a1.isSelected()) {
            a1.setSelected(false);

        }
        if (a3.isSelected()) {
            a3.setSelected(false);

        }
        try {
            atualizarGrafo3();
        } catch (ED_11_Parte1_Ex3.EmptyCollectionException ex) {
            Logger.getLogger(Demo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_a2ActionPerformed

    private void a1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_a1ActionPerformed
        try {
            //  Dijkstra.setUltimaVisita("NONEV");
            //  resetGrafo();
            //  atualizarGrafo();
            if (a2.isSelected()) {
                a2.setSelected(false);
            }
            if (a3.isSelected()) {
                a3.setSelected(false);
            }
            atualizarGrafo2();
        } catch (ED_11_Parte1_Ex3.EmptyCollectionException ex) {
            Logger.getLogger(Demo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_a1ActionPerformed

    private void custoMaxCombateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_custoMaxCombateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_custoMaxCombateActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        try {
            atualizarGrafo();
            if (a2.isSelected()) {
                a2.setSelected(false);
            }
            if (a1.isSelected()) {
                a1.setSelected(false);
            }

            a3.setSelected(true);

        } catch (ED_11_Parte1_Ex3.EmptyCollectionException ex) {
            Logger.getLogger(Demo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void inicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inicioActionPerformed

    }//GEN-LAST:event_inicioActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        boolean estado_Conquista = false;
        if (jogador != null) {

            if (resultado != null) {
                Object[] options = {"Sim", "Não"};

                Cidade cidadeConquista = (Cidade) resultado.getRear().getElement();
                Cidade[] cidades = new Cidade[network.getVertices().length];
                String cd = "";
                int index = 0;
                while (cidadeConquista != null) {
                    cd = "  " + cidadeConquista.getNome() + cd;
                    cidades[index] = cidadeConquista;
                    cidadeConquista = cidadeConquista.getPrevious();
                    index++;
                }

                if (JOptionPane.showOptionDialog(null,
                        "Conquistar Cidades:  " + cd,
                        "Registar", JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE, null, options, options[0])
                        == JOptionPane.YES_OPTION) {

                    if (jogador.getExercito() >= exercitoPerdas) {
                        //conquistar cidades
                        for (int i = 0; i < index; i++) {
                            jogador.conquistarCidade(cidades[i]);
                            System.out.println("Conquistou cidade " + cidades[i].getNome());
                            if (getItem(cidades[i].getNome()) == -1) {
                                inicio.addItem(cidades[i].getNome());
                                fim.removeItem(cidades[i].getNome());
                                estado_Conquista = true;
                            }

                        }
                        jogador.efetuarPerdaExercito((int) Math.round(exercitoPerdas));
                        exercitoJ.setText(String.valueOf(jogador.getExercito() + ""));
                        panel.sendJogadorData(jogador);
                        panel.repaint();
                        if (!estado_Conquista) {
                            JOptionPane.showMessageDialog(null, "Estas Cidades ja estão conquistadas !!!");
                        } else {
                            JOptionPane.showMessageDialog(null, "Conquistou as Cidades !!!");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Não tem exercito suficiente.");
                    }

                }

            } else {
                JOptionPane.showMessageDialog(null, "Introduza a cidade a conquistar.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Primeiro crie um jogador.");
        }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        DataManagementADT dataManagementADT = new DataManagement();
        network = new NetworkCidades();

        try {
            network = dataManagementADT.obterNetwork("./Ficheiros/dadosT.csv");
        } catch (IOException ex) {
        }
        Cidade cidade = (Cidade) network.getVertices()[network.getIndex(new Cidade(cidadeJ.getSelectedItem().toString(), 0))];

        try {
            UnorderedListADT<Cidade> cidadesConquistadas = new ArrayUnorderedList<>();
            cidadesConquistadas.addToFront(cidade);
            jogador = new Jogador(nomeJ.getText(), Integer.valueOf(exercitoJ.getText()), cidadesConquistadas);
            inicio.removeAllItems();
            inicio.addItem(cidade.getNome());
            fim.removeItem(cidade.getNome());
            JOptionPane.showMessageDialog(null, "Jogador criado.");
            nomeJ.setEnabled((false));
            exercitoJ.setEnabled(false);
            cidadeJ.setEnabled(false);
            jButton6.setEnabled(false);
            panel.sendJogadorData(jogador);
            panel.repaint();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Introduza um numero inteiro para o exercito.");
        }


    }//GEN-LAST:event_jButton6ActionPerformed

    private void checkDurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkDurActionPerformed
        checkCusto.setSelected(false);
        checkCustoMaximoCombate.setSelected(false);         
        checkNumeroMaxCombates.setSelected(false);
    }//GEN-LAST:event_checkDurActionPerformed

    private void checkCustoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkCustoActionPerformed
        checkDur.setSelected(false);
        checkCustoMaximoCombate.setSelected(false);         
        checkNumeroMaxCombates.setSelected(false);
    }//GEN-LAST:event_checkCustoActionPerformed

    private void checkCustoMaximoCombateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkCustoMaximoCombateActionPerformed
       checkDur.setSelected(false);
        checkCusto.setSelected(false);         
        checkNumeroMaxCombates.setSelected(false);
    }//GEN-LAST:event_checkCustoMaximoCombateActionPerformed

    private void checkNumeroMaxCombatesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkNumeroMaxCombatesActionPerformed
       checkDur.setSelected(false);
        checkCusto.setSelected(false);         
        checkCustoMaximoCombate.setSelected(false);
    }//GEN-LAST:event_checkNumeroMaxCombatesActionPerformed
    public void setAdjacencias(Cidade cidade) throws ED_11_Parte1_Ex3.EmptyCollectionException {

        for (int i = 0; i < network.getVertices().length; i++) {
            if (network.getAdjMatrix()[network.getIndex(cidade)][i]) {
                for (int j = 0; j <= network.ajdListWeight[network.getIndex(cidade)][i].size(); j++) {
                    DadosTrajeto dT = (DadosTrajeto) network.ajdListWeight[network.getIndex(cidade)][i].removeMin();

                    cidade.add_DadosTrajeto(dT.getCidadeDestino(), dT.getKms(), dT.getDur(), dT.getCusto());

                }

            }
        }

    }

    public int getItem(String cidade) {
        for (int i = 0; i < inicio.getItemCount(); i++) {
            if (inicio.getItemAt(i).compareTo(cidade) == 0) {
                return i;
            }
        }
        return -1;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Demo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Demo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Demo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Demo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Demo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton a1;
    private javax.swing.JRadioButton a2;
    private javax.swing.JRadioButton a3;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JCheckBox checkCusto;
    private javax.swing.JCheckBox checkCustoMaximoCombate;
    private javax.swing.JCheckBox checkDur;
    private javax.swing.JCheckBox checkNumeroMaxCombates;
    private javax.swing.JComboBox<String> cidadeJ;
    private javax.swing.JTextField custoMax;
    private javax.swing.JTextField custoMaxCombate;
    private javax.swing.JTextField durMax;
    private javax.swing.JFormattedTextField exercitoJ;
    private javax.swing.JComboBox<String> fim;
    private javax.swing.JComboBox<String> inicio;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField nomeJ;
    private javax.swing.JTextField numCombatesMax;
    private javax.swing.JPanel panelMain;
    private javax.swing.JLabel status;
    // End of variables declaration//GEN-END:variables
}
